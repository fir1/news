// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "kasimovfirdavs@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/article": {
            "get": {
                "description": "Get article, it shows a single news article on screen, using an HTML display",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "News"
                ],
                "summary": "Get article, it shows a single news article on screen, using an HTML display",
                "operationId": "article-get",
                "parameters": [
                    {
                        "type": "string",
                        "name": "url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get health of server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health-Server"
                ],
                "summary": "Get health of server",
                "operationId": "get-health",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/news": {
            "get": {
                "description": "List news articles from a public news feed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "News"
                ],
                "summary": "List news articles from a public news feed",
                "operationId": "news-list",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "possible values: \"general, technology\". By default we will take news feed with category ` + "`" + `general` + "`" + `.",
                        "name": "categories",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "if value ` + "`" + `news_source_url` + "`" + ` filled the system will try to fetch news from the given ` + "`" + `url` + "`" + `\nand please don't fill anything for ` + "`" + `providers` + "`" + ` field because you are allowed\nto choose to get a news feed either via choosing existing providers or by giving news_source_url",
                        "name": "news_source_url",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "possible values: \"sky, bbc\". By default we will take news feed from all the available providers.\nif value ` + "`" + `providers` + "`" + ` filled the system will try to fetch news from the given providers\nand please don't fill anything for ` + "`" + `news_source_url` + "`" + ` field because you are allowed\nto choose to get a news feed either via choosing existing providers or by giving news_source_url.",
                        "name": "providers",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "DESC",
                        "description": "one-of: DESC - latest article will be shown first in the list, ASC - oldest article will be shown first in the list",
                        "name": "sort_by_publish_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ListNewsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "ListNewsResponse": {
            "type": "object",
            "properties": {
                "news": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/News"
                    }
                }
            }
        },
        "News": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "provider_logo_url": {
                    "type": "string"
                },
                "publish_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080/",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Swagger News API",
	Description:      "This is an API documentation for News Feed backend",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
